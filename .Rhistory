pcode
p <- list()
pcode <- 'p[[1]]'
for (i in 1:length(res_var)) {
p[[res_var[i]]] <- ggplot(picdata[picdata$variable %in% res_var[i],], aes(x = s , y = v50)) +
geom_line(aes(y = v025), linetype = 2) +
geom_line(aes(y = v975), linetype = 2) +
geom_hline(yintercept = 0) + labs(title = res_var[i]) +
geom_line() + theme_bw()
if (i != 1) pcode <- paste(pcode, '+p[[',as.character(i),']]',sep = '')
}
pcode
p <- list()
pcode <- 'p[[1]]'
for (i in 1:length(res_var)) {
p[[res_var[i]]] <- ggplot(picdata[picdata$variable %in% res_var[i],], aes(x = s , y = v50)) +
geom_line(aes(y = v025), linetype = 2) +
geom_line(aes(y = v975), linetype = 2) +
geom_hline(yintercept = 0) + labs(title = res_var[i]) +
geom_line() + theme_bw()
if (i != 1) pcode <- paste(pcode, '+p[[',as.character(i),']]',sep = '')
if (i == length(res_var)) pcode <- paste(pcode, '+plot_layout(ncol = 2)')
}
pcode
eval(parse(text = pcode))
p <- list()
pcode <- 'p[[1]]'
for (i in 1:length(res_var)) {
p[[res_var[i]]] <- ggplot(picdata[picdata$variable %in% res_var[i],], aes(x = s , y = v50)) +
geom_line(aes(y = v025), linetype = 2) +
geom_line(aes(y = v975), linetype = 2) +
geom_hline(yintercept = 0) + labs(title = res_var[i]) +
geom_line() + theme_bw()
if (i != 1) pcode <- paste(pcode, '+p[[',as.character(i),']]',sep = '')
if (i == length(res_var)) pcode <- paste(pcode, '+ patchwork::plot_layout(ncol = 2)', sep = '')
}
eval(parse(text = pcode))
p <- list()
pcode <- 'p[[1]]'
for (i in 1:length(res_var)) {
p[[res_var[i]]] <- ggplot(picdata[picdata$variable %in% res_var[i],], aes(x = s , y = v50)) +
geom_line(aes(y = v025), linetype = 2) +
geom_line(aes(y = v975), linetype = 2) +
geom_hline(yintercept = 0) + labs(title = res_var[i]) +
geom_line() + theme_bw()
if (i != 1) pcode <- paste(pcode, '+p[[',as.character(i),']]',sep = '')
if (i == length(res_var)) pcode <- paste('ans <- ',pcode, '+ patchwork::plot_layout(ncol =',
as.character(ncol_pic),')', sep = '')
}
eval(parse(text = pcode))
ncol_pic = 2
p <- list()
pcode <- 'p[[1]]'
for (i in 1:length(res_var)) {
p[[res_var[i]]] <- ggplot(picdata[picdata$variable %in% res_var[i],], aes(x = s , y = v50)) +
geom_line(aes(y = v025), linetype = 2) +
geom_line(aes(y = v975), linetype = 2) +
geom_hline(yintercept = 0) + labs(title = res_var[i]) +
geom_line() + theme_bw()
if (i != 1) pcode <- paste(pcode, '+p[[',as.character(i),']]',sep = '')
if (i == length(res_var)) pcode <- paste('ans <- ',pcode, '+ patchwork::plot_layout(ncol =',
as.character(ncol_pic),')', sep = '')
}
eval(parse(text = pcode))
ans
draw_irf(irf,res_var = c('usa_epu','can_epu'))
load_all()
draw_irf(irf,res_var = c('usa_epu','can_epu'))
source('E:/17_HuaDong/reserch/FiscalCompany/RCode/data-raw/main.R', encoding = 'UTF-8', echo=TRUE)
devtools::document()
devtools::document()
devtools::document()
load_all()
draw_irf(irf,res_var = c('usa_epu','can_epu'))
devtools::check()
library(devtools)
use_package('foreach')
use_package('ggplot2')
use_package('magrittr')
(1-0.9)/2
1-dw
dw <- (1-0.9)/2
1-dw
rm(list = ls())
library(pacman)
p_load(CADFtest, TBHB, VARrf, tidyverse, randomForestSRC)
# load('data-raw/gvar.rdata') # from gvardata.r
load('E:\\17_HuaDong\\reserch\\FiscalCompany\\RCode\\data-raw\\gvar.rdata')
# delete some missing data
gvar <- dplyr::select(gvar, -china_lr, -chl_lr)
# 将利率等转换为环比
ToHB <- function(gvar, varnm = 'swe_Dp'){
prodata <- gvar[,c('yr',varnm)]
prodata$year <- str_sub(prodata$yr,1,4) %>% as.numeric()
prodata$mon <- str_sub(prodata$yr,6) %>% as.numeric()
ans <- ConvertRatio(prodata, year = 'year', mon = 'mon', value.name = varnm, to = 'HB')
names(ans) <- str_replace(names(ans),'HB','')
ans <- ans[,3]
return(ans)
}
# Dp, r, lr如果不平稳，换为环比，其他不平稳直接差分
for (i in 2:ncol(gvar)) {
ans <- CADFtest(gvar[,i], type = 'trend', max.lag.y = 5)
if (ans$p.value > 0.1){
ans2 <- names(gvar)[i]
# print(ans2)
ifelse (str_detect(ans2, '_Dp|_r|_lr'),
gvar[,i] <- ToHB(gvar, ans2),
gvar[,i] <- c(NA, diff(gvar[,i])))
}
}
# VARrf估计
# fit <- VARrf(gvar[-1,-1],pmax = 1)
regdata <- gvar[-1,-1]
imp_var <- 'japan_epu'
num <- which(names(regdata) %in% imp_var)
if (FALSE){
irf <- IRFrf_gen(regdata, p = 1, shockvar = num, ncores = 7)
save(irf, file = 'data-raw/irf_japan.rdata')
}else load('E:\\17_HuaDong\\reserch\\FiscalCompany\\RCode/data-raw/irf_usa.rdata')
draw_irf(irf,res_var = c('usa_epu','can_epu'))
draw_irf(irf,res_var = c('usa_epu','can_epu'), ci = 0.8)
devtools::load_all()
draw_irf(irf,res_var = c('usa_epu','can_epu'), ci = 0.8)
devtools::load_all()
draw_irf(irf,res_var = c('usa_epu','can_epu'), ci = 0.8)
draw_irf(irf,res_var = c('usa_epu','can_epu'), ci = NULL)
devtools::document()
library(devtools)
document()
check()
## code to prepare `regdata` dataset goes here
rm(list = ls())
library(pacman)
p_load(tsDyn,vars,randomForestSRC,bvartools,MyFun,tidyverse,devtools,
parallel,doParallel,ggplot2)
load_all()
seed <- 1024
# 参数矩阵，第一列截距，第二列趋势项
B1 <- matrix(c(0.2, 0.1, 0.2, 0.3,0.3,0.4,0.2,0.1), 2)
sim_dt <- VAR.sim(B1, n = 200, lag = 2,include = 'none',show.parMat = T) %>%
as.data.frame()
colnames(sim_dt) <- c('y1','y2')
# ts.plot(sim_dt)
fit <- vars::VAR(sim_dt, p = 2,type = 'none')
# summary(fit)
fit <- VARrf(sim_dt)
fit <- VARrf(sim_dt, p = 4)
View(fit)
fit = fit$fit_rf
residuals(fit)
fit$regrOutput$y1$predicted
?randomForestSRC
get.mv.error(fit)
get.mv.predicted(fit)
fit$yvar - get.mv.predicted(fit)
View(fit)
fit$xvar[nrow(fit$xvar),]
start_value = fit$xvar[nrow(fit$xvar),]
predict(fit)
predict(fit, newdata = start_value)
ans <- predict(fit, newdata = start_value)
View(ans)
predict(fit, newdata = start_value) %>% get.mv.predicted()
ans <- predict(fit, newdata = start_value) %>% get.mv.predicted()
haty <- predict(fit, newdata = start_value) %>% get.mv.predicted()
haty
haty %>% class()
# residuals
eps <- fit$yvar - get.mv.predicted(fit)
divide_by()
?divide_by
sample(1:nrow(eps),1)
eps[sample(1:nrow(eps),1),]
predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
View(start_value)
names(start_value)
str_split_fixed(names(start_value),'\\.',2)
str_split_fixed(names(start_value),'\\.',2)[,2]
str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric()
str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric() %>%
max()
# update start_value
pmax <- str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric() %>%
max()
str_split_fixed(names(start_value),'\\.',2)[,1] %>% unique()
yname <- str_split_fixed(names(start_value),'\\.',2)[,1] %>% unique()
# residuals and start value
eps <- fit$yvar - get.mv.predicted(fit)
start_value <- fit$xvar[nrow(fit$xvar),]
# forcast with 1 step ahead
sim_y <- predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
# update start_value
pmax <- str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(start_value),'\\.',2)[,1] %>% unique()
i = pmax
paste(yname,as.character(i),sep = '.')
start_value[,paste(yname,as.character(i),sep = '.')]
seq(pmax,2,-1)
start_value
for (i in seq(pmax,2,-1)) {
start_value[,paste(yname,as.character(i),sep = '.')] <-
start_value[,paste(yname,as.character(i-1),sep = '.')]}
start_value
start_value[,paste(yname,'1',sep = '.')]
sim_y
start_value[,paste(yname,'1',sep = '.')] <- sim_y
start_value
s = 12
eps
bench_fst <- matrix(NA, nrow = s, ncol = ncol(eps)) %>%
as.data.frame()
names(bench_fst) <- names(eps)
bench_fst
for (j in 1:s) {
# forcast with 1 step ahead
bench_fst[j,] <- sim_y <- predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
# update start_value
pmax <- str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(start_value),'\\.',2)[,1] %>% unique()
for (i in seq(pmax,2,-1)) {
start_value[,paste(yname,as.character(i),sep = '.')] <-
start_value[,paste(yname,as.character(i-1),sep = '.')]
}
start_value[,paste(yname,'1',sep = '.')] <- sim_y
}
View(bench_fst)
for (j in 1:s) {
# forcast with 1 step ahead
bench_fst[j,] <- sim_y <- predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
# update start_value
pmax <- str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(start_value),'\\.',2)[,1] %>% unique()
for (i in seq(pmax,2,-1)) {
start_value[,paste(yname,as.character(i),sep = '.')] <-
start_value[,paste(yname,as.character(i-1),sep = '.')]
}
start_value[,paste(yname,'1',sep = '.')] <- sim_y
}
for (j in 1:s) {
# forcast with 1 step ahead
bench_fst[j,] <- sim_y <- predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
# update start_value
pmax <- str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(start_value),'\\.',2)[,1] %>% unique()
for (i in seq(pmax,2,-1)) {
start_value[,paste(yname,as.character(i),sep = '.')] <-
start_value[,paste(yname,as.character(i-1),sep = '.')]
}
start_value[,paste(yname,'1',sep = '.')] <- sim_y
}
for (j in 1:s) {
# forcast with 1 step ahead
bench_fst[j,] <- sim_y <- predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
# update start_value
pmax <- str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(start_value),'\\.',2)[,1] %>% unique()
for (i in seq(pmax,2,-1)) {
start_value[,paste(yname,as.character(i),sep = '.')] <-
start_value[,paste(yname,as.character(i-1),sep = '.')]
}
start_value[,paste(yname,'1',sep = '.')] <- sim_y
}
for (j in 1:s) {
# forcast with 1 step ahead
bench_fst[j,] <- sim_y <- predict(fit, newdata = start_value) %>% get.mv.predicted() %>%
add(eps[sample(1:nrow(eps),1),])
# update start_value
pmax <- str_split_fixed(names(start_value),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(start_value),'\\.',2)[,1] %>% unique()
for (i in seq(pmax,2,-1)) {
start_value[,paste(yname,as.character(i),sep = '.')] <-
start_value[,paste(yname,as.character(i-1),sep = '.')]
}
start_value[,paste(yname,'1',sep = '.')] <- sim_y
}
shock <- eps[1,]
shockvar = 1
d = 1
shock[,shockvar] <- d
shock
shock <- eps[1,]
shock <- 0
shock[,shockvar] <- d
shock
shock <- matrix(0, 1, ncol(eps)) %>% as.data.frame()
shock[,shockvar] <- d
shock
shock <- matrix(NA, nrow = 1, ncol = ncol(eps)) %>% as.data.frame()
## code to prepare `regdata` dataset goes here
rm(list = ls())
library(pacman)
p_load(tsDyn,vars,randomForestSRC,bvartools,MyFun,tidyverse,devtools,
parallel,doParallel,ggplot2)
load_all()
seed <- 1024
# 参数矩阵，第一列截距，第二列趋势项
B1 <- matrix(c(0.2, 0.1, 0.2, 0.3,0.3,0.4,0.2,0.1), 2)
sim_dt <- VAR.sim(B1, n = 200, lag = 2,include = 'none',show.parMat = T) %>%
as.data.frame()
colnames(sim_dt) <- c('y1','y2')
# ts.plot(sim_dt)
fit <- vars::VAR(sim_dt, p = 2,type = 'none')
# summary(fit)
fit <- VARrf(sim_dt)
fit <- VARrf(sim_dt, p = 4)
# 绘图LP
picdata <- IRFrf(data = sim_dt, pmax = 5, s = 12, shockvar = 1)
shockvar_med <- paste(yvar[shockvar],'.', as.character(j), sep = '')
fit <- VARrf(data = data, indx = indx, pmax = pmax, p = p, s = j)
innov <- fit$fit_rf$xvar
innov <- innov[histime,]
innov[1,] <- 0
# get d_i
bench <- innov
innov[,shockvar_med] <- d
innov
innov[,shockvar_med]
innov[,shockvar_med] + d
shockvar_med <- paste(yvar[shockvar],'.', as.character(j), sep = '')
fit <- VARrf(data = data, indx = indx, pmax = pmax, p = p, s = j)
innov <- fit$fit_rf$xvar
innov <- innov[histime,]
# get d_i
# innov[,shockvar_med] <- 0
bench <- innov
innov[,shockvar_med] <- innov[,shockvar_med] + d
bench
innov
## code to prepare `regdata` dataset goes here
rm(list = ls())
library(pacman)
p_load(tsDyn,vars,randomForestSRC,bvartools,MyFun,tidyverse,devtools,
parallel,doParallel,ggplot2)
load_all()
seed <- 1024
# 参数矩阵，第一列截距，第二列趋势项
B1 <- matrix(c(0.2, 0.1, 0.2, 0.3,0.3,0.4,0.2,0.1), 2)
sim_dt <- VAR.sim(B1, n = 200, lag = 2,include = 'none',show.parMat = T) %>%
as.data.frame()
colnames(sim_dt) <- c('y1','y2')
# summary(fit)
fit <- VARrf(sim_dt)
fit = fit$fit_rf
s = 12
# initialize
eps <- fit$yvar - get.mv.predicted(fit)
stvalue_shock <- stvalue_bench <- fit$xvar[nrow(fit$xvar),]
bench_fst <- matrix(NA, nrow = s, ncol = ncol(eps)) %>%
as.data.frame()
names(bench_fst) <- names(eps)
shock_fst <- bench_fst
j=1
ans <- eps[sample(1:nrow(eps),1),]
bench_fst[j,] <- predict(fit, newdata = stvalue_bench) %>%
get.mv.predicted() %>% add(ans)
bench_fst[j,]
d = 1
shockvar = 1
shock <- matrix(NA, nrow = 1, ncol = ncol(eps)) %>% as.data.frame()
shock[,shockvar] <- d
shock
shock <- matrix(0, nrow = 1, ncol = ncol(eps)) %>% as.data.frame()
shock[,shockvar] <- d
hock
shock
ans <- eps[sample(1:nrow(eps),1),]
bench_fst[j,] <- predict(fit, newdata = stvalue_bench) %>%
get.mv.predicted()
bench_fst
eps[n_eps,] + shock
n_eps = 1
eps[n_eps,] + shock
eps[n_eps,]
# update stvalue_bench
pmax <- str_split_fixed(names(stvalue_bench),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(stvalue_bench),'\\.',2)[,1] %>% unique()
pmax
yname
for (i in seq(pmax,2,-1)) {
stvalue_bench[,paste(yname,as.character(i),sep = '.')] <-
stvalue_bench[,paste(yname,as.character(i-1),sep = '.')]
}
stvalue_bench
# initialize
eps <- fit$yvar - get.mv.predicted(fit)
stvalue_shock <- stvalue_bench <- fit$xvar[nrow(fit$xvar),]
bench_fst <- matrix(NA, nrow = s, ncol = ncol(eps)) %>%
as.data.frame()
names(bench_fst) <- names(eps)
shock_fst <- bench_fst
# haty with no epsilon
bench_fst[j,] <- predict(fit, newdata = stvalue_bench) %>%
get.mv.predicted()
shock <- matrix(0, nrow = 1, ncol = ncol(eps)) %>% as.data.frame()
shock[,shockvar] <- d
# haty with epsilon
shock_fst[j,] <- bench_fst[j,] + eps[n_eps,] + shock
bench_fst[j,] <- bench_fst[j,] + eps[sample(1:nrow(eps),1),]
# update stvalue_bench
pmax <- str_split_fixed(names(stvalue_bench),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(stvalue_bench),'\\.',2)[,1] %>% unique()
for (i in seq(pmax,2,-1)) {
stvalue_bench[,paste(yname,as.character(i),sep = '.')] <-
stvalue_bench[,paste(yname,as.character(i-1),sep = '.')]
stvalue_shock[,paste(yname,as.character(i),sep = '.')] <-
stvalue_shock[,paste(yname,as.character(i-1),sep = '.')]
}
stvalue_bench
stvalue_shock
stvalue_bench[,paste(yname,'1',sep = '.')] <- bench_fst[j,]
stvalue_shock[,paste(yname,'1',sep = '.')] <- shock_fst[j,]
stvalue_shock
stvalue_bench[,paste(yname,'1',sep = '.')] <- bench_fst[j,]
eps <- fit$yvar - get.mv.predicted(fit)
stvalue_shock <- stvalue_bench <- fit$xvar[nrow(fit$xvar),]
bench_fst <- matrix(NA, nrow = s, ncol = ncol(eps)) %>%
as.data.frame()
names(bench_fst) <- names(eps)
shock_fst <- bench_fst
bench_fst[j,] <- predict(fit, newdata = stvalue_bench) %>%
get.mv.predicted()
shock <- matrix(0, nrow = 1, ncol = ncol(eps)) %>% as.data.frame()
shock[,shockvar] <- d
# haty with epsilon
shock_fst[j,] <- bench_fst[j,] + eps[n_eps,] + shock
bench_fst[j,] <- bench_fst[j,] + eps[sample(1:nrow(eps),1),]
# update stvalue_bench
pmax <- str_split_fixed(names(stvalue_bench),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(stvalue_bench),'\\.',2)[,1] %>% unique()
for (i in seq(pmax,2,-1)) {
stvalue_bench[,paste(yname,as.character(i),sep = '.')] <-
stvalue_bench[,paste(yname,as.character(i-1),sep = '.')]
stvalue_shock[,paste(yname,as.character(i),sep = '.')] <-
stvalue_shock[,paste(yname,as.character(i-1),sep = '.')]
}
stvalue_bench[,paste(yname,'1',sep = '.')] <- bench_fst[j,]
stvalue_shock[,paste(yname,'1',sep = '.')] <- shock_fst[j,]
stvalue_bench
stvalue_shock
eps <- fit$yvar - get.mv.predicted(fit)
stvalue_shock <- stvalue_bench <- fit$xvar[nrow(fit$xvar),]
bench_fst <- matrix(NA, nrow = s, ncol = ncol(eps)) %>%
as.data.frame()
names(bench_fst) <- names(eps)
shock_fst <- bench_fst
pmax <- str_split_fixed(names(stvalue_bench),'\\.',2)[,2] %>% as.numeric() %>%
max()
yname <- str_split_fixed(names(stvalue_bench),'\\.',2)[,1] %>% unique()
load_all()
load_all()
# IRF_mt
VARrf_forcast(fit, s = 12)
# IRF_mt
VARrf_forcast(fit, s = 12, n_eps = 2)
# summary(fit)
fit <- VARrf(sim_dt)
fit = fit$fit_rf
stvalue_shock <- stvalue_bench <- fit$xvar[nrow(fit$xvar),]
stvalue_shock
fit$xvar[nrow(fit$xvar),] %>% class()
?randomForestSRC
document()
VARrf_forcast(fit = fit$fit_rf, s = 12,shockvar = 1, d = 1, n_eps = 2)
VARrf_forcast(fit, s = 12,shockvar = 1, d = 1, n_eps = 2)
load_all()
VARrf_forcast(fit, s = 12,shockvar = 1, d = 1, n_eps = 2)
fit$xvar %>% nrow()
sd(fit$yvar$y1)
load_all()
rlt <- list()
for (i in 1:196) {
rlt[[i]] <- VARrf_forcast(fit, s = 12, shockvar = 1, d = sd(fit$yvar$y1), n_eps = i)
}
View(rlt)
rlt <- lapply(1:196, VARrf_forcast, fit = fit, s = 12, shockvar = 1, d = sd(fit$yvar$y1))
Sys.time()
ans <- Sys.time()
rlt <- list()
for (i in 1:196) {
rlt[[i]] <- VARrf_forcast(fit, s = 12, shockvar = 1, d = sd(fit$yvar$y1), n_eps = i)
}
Sys.time() - ans
ans <- Sys.time()
rlt <- lapply(1:196, VARrf_forcast, fit = fit, s = 12, shockvar = 1, d = sd(fit$yvar$y1))
Sys.time() - ans
View(rlt)
